<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go codelab step-by-step page</title>
    <link>https://mingrammer.com/go-codelab/index.xml</link>
    <description>Recent content on Go codelab step-by-step page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Nov 2016 10:20:44 +0900</lastBuildDate>
    <atom:link href="https://mingrammer.com/go-codelab/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>코드랩 소개</title>
      <link>https://mingrammer.com/go-codelab/codelab-introduction</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/codelab-introduction</guid>
      <description>

&lt;p&gt;본 코드랩은 GDG Devfest Incheon 2016에서 Google의 Open Source Language인 Go 언어에 대한 맛보기를 할 수 있도록 만들어졌습니다.
이 코드랩의 단계를 차근차근 밟아나가게 되면, 마지막에 여러분은 Go언어의 대부분의 특징(Goroutine, Channel, Interface and method, Package Import, Error Handling with Multiple Return)을 확인해볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번 시간엔 가상의 IoT 센서 클라이언트와 서버 간 통신에서 착안하여, 이를 Go언어를 통해 구현해보려고 합니다.&lt;/p&gt;

&lt;p&gt;순서는 다음과 같습니다.&lt;/p&gt;

&lt;h4 id=&#34;1-설치-및-환경설정-install-and-env&#34;&gt;1. &lt;a href=&#34;https://mingrammer.com/go-codelab/install-and-env&#34;&gt;설치 및 환경설정&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;2-프로젝트-구조-project-structure&#34;&gt;2. &lt;a href=&#34;https://mingrammer.com/go-codelab/project-structure&#34;&gt;프로젝트 구조&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;3-모델-및-모델-패키지-models&#34;&gt;3. &lt;a href=&#34;https://mingrammer.com/go-codelab/models&#34;&gt;모델 및 모델 패키지&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;4-struct와-interface-struct-and-interface&#34;&gt;4. &lt;a href=&#34;https://mingrammer.com/go-codelab/struct-and-interface&#34;&gt;Struct와 Interface&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;5-interface-method-구현-implement-interface-method&#34;&gt;5. &lt;a href=&#34;https://mingrammer.com/go-codelab/implement-interface-method&#34;&gt;Interface Method 구현&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;6-클라이언트의-구조-및-main-package-how-client-works&#34;&gt;6. &lt;a href=&#34;https://mingrammer.com/go-codelab/how-client-works&#34;&gt;클라이언트의 구조 및 main package&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;7-클라이언트에서-goroutine-channel-mutex-활용-방식-go-routine-and-channel-and-mutex&#34;&gt;7. &lt;a href=&#34;https://mingrammer.com/go-codelab/go-routine-and-channel-and-mutex&#34;&gt;클라이언트에서 Goroutine, Channel, Mutex 활용 방식&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;8-클라이언트의-작동-방식-how-client-works&#34;&gt;8. &lt;a href=&#34;https://mingrammer.com/go-codelab/how-client-works&#34;&gt;클라이언트의 작동 방식&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;9-faker의-구조-faker-structure&#34;&gt;9. &lt;a href=&#34;https://mingrammer.com/go-codelab/faker-structure&#34;&gt;Faker의 구조&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;10-서버의-구조-net-http-패키지를-활용한-포트별-개별서버-구동-server-structure-and-net-http&#34;&gt;10. &lt;a href=&#34;https://mingrammer.com/go-codelab/server-structure-and-net-http&#34;&gt;서버의 구조 (net/http 패키지를 활용한 포트별 개별서버 구동)&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;11-서버에서-channel-활용-방식-및-log-handler-how-server-and-logger-works&#34;&gt;11. &lt;a href=&#34;https://mingrammer.com/go-codelab/how-server-and-logger-works&#34;&gt;서버에서 Channel 활용 방식 및 Log Handler&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;12-go에서-예외-처리하기-error-handling-in-go&#34;&gt;12. &lt;a href=&#34;https://mingrammer.com/go-codelab/error-handling-in-go&#34;&gt;Go에서 예외 처리하기&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;13-큰-그림-다시-보기-how-application-works&#34;&gt;13. &lt;a href=&#34;https://mingrammer.com/go-codelab/how-application-works&#34;&gt;큰 그림 다시 보기&lt;/a&gt;&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>설치 및 환경셋팅</title>
      <link>https://mingrammer.com/go-codelab/install-and-env</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/install-and-env</guid>
      <description></description>
    </item>
    
    <item>
      <title>프로젝트 구조</title>
      <link>https://mingrammer.com/go-codelab/project-structure</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/project-structure</guid>
      <description>

&lt;p&gt;본 프로젝트는 크게 3부분(Server, Sensor, Log Handler)으로 나뉠 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mingrammer.com/go-codelab/img/project_structure.png&#34; alt=&#34;Alt project_structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;는 IoT 기기의 &lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;로, 이 구조에선 Client를 의미하며, &lt;code&gt;sensor_client.go&lt;/code&gt;에서 정의되어있습니다. 이 프로젝트에서는 다음의 3개의 &lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;들이 존재합니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4 id=&#34;자이로-센서-gyroscope-sensor&#34;&gt;&lt;strong&gt;자이로 센서 (Gyroscope Sensor)&lt;/strong&gt;&lt;/h4&gt;

&lt;h4 id=&#34;가속도-센서-accelometer-sensor&#34;&gt;&lt;strong&gt;가속도 센서 (Accelometer Sensor)&lt;/strong&gt;&lt;/h4&gt;

&lt;h4 id=&#34;온도-및-습도계-temperature-sensor&#34;&gt;&lt;strong&gt;온도 및 습도계 (Temperature Sensor)&lt;/strong&gt;&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;이들 센서의 종류는 잠시 후 설명할 &lt;code&gt;model&lt;/code&gt; 패키지에 정의되어 있으며, 센서들은 일정 시간 간격마다 &lt;em&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/em&gt;에게 &lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;에서 발생한 측정값을 보내줍니다. 이 측정값으로는 각속도(&lt;code&gt;Angule Velocity&lt;/code&gt;), 선속도(&lt;code&gt;Gravitational Velocity&lt;/code&gt;), 온도 및 습도(&lt;code&gt;Temperature and Humidity&lt;/code&gt;)가 있습니다.&lt;/p&gt;

&lt;p&gt;그러나, 우리는 가상의 센서를 구현하는 것이기 때문에, 실제 측정값을 넣지 못하는 관계로, &lt;code&gt;faker&lt;/code&gt;라는 것을 이용해, 가상의 난수값을 측정값으로 설정하여 서버에 보내줄 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/em&gt;는 각 &lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;에 대한 측정값을 HTTP Protocol을 통해서 받으며, &lt;code&gt;sensor_server.go&lt;/code&gt;에 정의되어 있습니다. 이 때, 각 측정값 종류에 대한 포트 번호는 달리해서 보내게 됩니다. &lt;code&gt;&amp;lt;em&amp;gt;Server&lt;/code&gt;&lt;/em&gt;는 &lt;code&gt;&amp;lt;em&amp;gt;Sensor&lt;/code&gt;&lt;/em&gt;로부터 받은 데이터의 내용으로 측정값의 종류와 그 값을 확인합니다.&lt;/p&gt;

&lt;p&gt;이렇게 확인된 데이터는 &lt;em&gt;&lt;code&gt;Log Handler&lt;/code&gt;&lt;/em&gt;에게 넘겨지며, 이를 받은 &lt;em&gt;&lt;code&gt;Log Handler&lt;/code&gt;&lt;/em&gt;는 실시간으로 각 &lt;em&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/em&gt;가 받은 측정값을 &lt;code&gt;log&lt;/code&gt; 폴더의 센서별 파일에 로그 형식으로 남깁니다.&lt;/p&gt;

&lt;p&gt;이러한 프로젝트 구조를 트리 형식으로 보면 다음과 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── faker
│   └── range.go
├── log
│   ├── Accel.log
│   ├── Gyro.log
│   └── Temp.log
├── models
│   └── sensor.go
├── README.md
├── sensor_client.go
└── sensor_server.go
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>모델과 패키지</title>
      <link>https://mingrammer.com/go-codelab/models</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/models</guid>
      <description></description>
    </item>
    
    <item>
      <title>Struct와 Interface</title>
      <link>https://mingrammer.com/go-codelab/struct-and-interface</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/struct-and-interface</guid>
      <description></description>
    </item>
    
    <item>
      <title>인터페이스 메서드</title>
      <link>https://mingrammer.com/go-codelab/implement-interface-methods</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/implement-interface-methods</guid>
      <description></description>
    </item>
    
    <item>
      <title>클라이언트 구조</title>
      <link>https://mingrammer.com/go-codelab/client-structure</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/client-structure</guid>
      <description></description>
    </item>
    
    <item>
      <title>고루틴, 채널 그리고 뮤텍스</title>
      <link>https://mingrammer.com/go-codelab/go-routine-and-channel-and-mutex</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/go-routine-and-channel-and-mutex</guid>
      <description></description>
    </item>
    
    <item>
      <title>클라이언트 동작 방식</title>
      <link>https://mingrammer.com/go-codelab/how-client-works</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/how-client-works</guid>
      <description></description>
    </item>
    
    <item>
      <title>Faker 구조</title>
      <link>https://mingrammer.com/go-codelab/faker-structure</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/faker-structure</guid>
      <description></description>
    </item>
    
    <item>
      <title>서버 구조 및 net/http</title>
      <link>https://mingrammer.com/go-codelab/server-structure-and-net-http</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/server-structure-and-net-http</guid>
      <description>

&lt;p&gt;이번에는 서버의 구조를 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;서버는 기본적으로 3개의 포트 번호에 대한 HTTP Server를 생성합니다. 각 포트 번호를 달리한 것은 서로 다른 측정값 종류를 받기 위함이여, 각 번호는 다음의 의미를 갖습니다.&lt;/p&gt;

&lt;h4 id=&#34;8001번은-자이로스코프-센서의-데이터를&#34;&gt;8001번은 자이로스코프 센서의 데이터를,&lt;/h4&gt;

&lt;h4 id=&#34;8002번은-가속도-센서의-데이터를&#34;&gt;8002번은 가속도 센서의 데이터를,&lt;/h4&gt;

&lt;h4 id=&#34;8003번은-온도-및-습도계의-데이터를-받습니다&#34;&gt;8003번은 온도 및 습도계의 데이터를 받습니다.&lt;/h4&gt;

&lt;p&gt;센서의 코드에서 봤듯이, HTTP 프로토콜을 이용하기 위해선 &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; 패키지가 필요합니다. 센서 클라이언트에서는 단순히 POST 요청을 보내면 됐기에 패키지를 &lt;code&gt;import&lt;/code&gt;하고 추가작업이 필요하지 않았습니다.&lt;/p&gt;

&lt;p&gt;그러나, &lt;code&gt;net/http&lt;/code&gt; 패키지에서 서버를 생성하는 메서드인 &lt;a href=&#34;https://golang.org/pkg/net/http/#ListenAndServe&#34;&gt;&lt;code&gt;ListenAndServe()&lt;/code&gt;&lt;/a&gt; 메서드를 확인해보면, 인자로 &lt;a href=&#34;https://golang.org/pkg/net/http/#Handler&#34;&gt;핸들러 인터페이스&lt;/a&gt;를 요구하고 있습니다. 이 핸들러 인터페이스를 다시 확인해보면, 결국 &lt;a href=&#34;https://golang.org/pkg/net/http/#HandlerFunc&#34;&gt;&lt;code&gt;ServeHTTP()&lt;/code&gt;&lt;/a&gt;라는 메서드를 요구합니다.&lt;/p&gt;

&lt;p&gt;따라서, 우리는 ServeHTTP() 메서드가 구현된 핸들러 인터페이스가 필요합니다. 이를 위해, 우리는 각 데이터 종류에 대한 인터페이스를 다음과 같이 만들어줘야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// GyroHandler : Gyroscopte sensor handler to implement ServeHTTP method&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;GyroHandler&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// AccelHandler : Accelerator sensro handler to implement ServeHTTP method&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;AccelHandler&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// TempHandler 	: Temperature sensor handler to implement ServeHTTP method&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TempHandler&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>서버에서의 채널 동작 방식 및 로그 핸들러</title>
      <link>https://mingrammer.com/go-codelab/how-server-and-logger-works</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/how-server-and-logger-works</guid>
      <description></description>
    </item>
    
    <item>
      <title>에러 핸들링</title>
      <link>https://mingrammer.com/go-codelab/error-handling-in-go</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/error-handling-in-go</guid>
      <description></description>
    </item>
    
    <item>
      <title>애플리케이션 동작 과정</title>
      <link>https://mingrammer.com/go-codelab/how-application-works</link>
      <pubDate>Mon, 14 Nov 2016 10:20:44 +0900</pubDate>
      
      <guid>https://mingrammer.com/go-codelab/how-application-works</guid>
      <description></description>
    </item>
    
  </channel>
</rss>